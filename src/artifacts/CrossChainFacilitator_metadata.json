{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "ghoToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "usdcToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "ghoTreasury",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "aaveGovernance",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "mintFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "transferFee",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_router",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "router",
						"type": "address"
					}
				],
				"name": "InvalidRouter",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldAaveGovernance",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAaveGovernance",
						"type": "address"
					}
				],
				"name": "AaveGovernanceUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "ghoTreasury",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "FeesDistributedToTreasury",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldGhoTreasury",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newGhoTreasury",
						"type": "address"
					}
				],
				"name": "GhoTreasuryUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "sourceChainSelector",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "MessageReceived",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint64",
						"name": "destinationChainSelector",
						"type": "uint64"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "feeToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fees",
						"type": "uint256"
					}
				],
				"name": "MessageSent",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newFee",
						"type": "uint256"
					}
				],
				"name": "MintFeeUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newFee",
						"type": "uint256"
					}
				],
				"name": "TransferFeeUpdated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "GHO_TOKEN",
				"outputs": [
					{
						"internalType": "contract IGhoToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_FEE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "USDC_TOKEN",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "chainId",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "ccReceiver",
						"type": "address"
					}
				],
				"name": "approveCrossChainReceiver",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "bytesToAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "calcMintFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "calcTransferFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "messageId",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "sourceChainSelector",
								"type": "uint64"
							},
							{
								"internalType": "bytes",
								"name": "sender",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct Client.EVMTokenAmount[]",
								"name": "destTokenAmounts",
								"type": "tuple[]"
							}
						],
						"internalType": "struct Client.Any2EVMMessage",
						"name": "message",
						"type": "tuple"
					}
				],
				"name": "ccipReceive",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "distributeFeesToTreasury",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAaveGovernance",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getGhoTreasury",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMintFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRouter",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "chainSelector",
						"type": "uint64"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "getRouterFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTransferFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "mintGHOForUSDC",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "redeemUSDCForGHO",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "chainId",
						"type": "uint64"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "sendGHOCrossChain",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "messageId",
						"type": "bytes32"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newAaveGovernance",
						"type": "address"
					}
				],
				"name": "updateAaveGovernance",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newGhoTreasury",
						"type": "address"
					}
				],
				"name": "updateGhoTreasury",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newFee",
						"type": "uint256"
					}
				],
				"name": "updateMintFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newFee",
						"type": "uint256"
					}
				],
				"name": "updateTransferFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"FeesDistributedToTreasury(address,address,uint256)": {
					"details": "Emitted when fees are distributed to the GhoTreasury",
					"params": {
						"amount": "The amount of the asset transferred to the ghoTreasury",
						"asset": "The address of the asset transferred to the ghoTreasury",
						"ghoTreasury": "The address of the ghoTreasury"
					}
				},
				"GhoTreasuryUpdated(address,address)": {
					"details": "Emitted when Gho Treasury address is updated",
					"params": {
						"newGhoTreasury": "The address of the new GhoTreasury contract",
						"oldGhoTreasury": "The address of the old GhoTreasury contract"
					}
				},
				"MintFeeUpdated(uint256,uint256)": {
					"details": "Emitted when the percentage fee is updated",
					"params": {
						"newFee": "The new fee (in bps)",
						"oldFee": "The old fee (in bps)"
					}
				},
				"TransferFeeUpdated(uint256,uint256)": {
					"details": "Emitted when the percentage fee is updated",
					"params": {
						"newFee": "The new fee (in bps)",
						"oldFee": "The old fee (in bps)"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"details": "Note ensure you check the msg.sender is the OffRampRouter",
					"params": {
						"message": "CCIP Message"
					}
				},
				"getGhoTreasury()": {
					"returns": {
						"_0": "The address of the GhoTreasury contract"
					}
				},
				"getMintFee()": {
					"returns": {
						"_0": "The percentage fee of the minted amount that needs to be repaid, on top of the principal (in bps)."
					}
				},
				"getRouter()": {
					"returns": {
						"_0": "i_router address"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.",
					"params": {
						"interfaceId": "The interfaceId to check"
					},
					"returns": {
						"_0": "true if the interfaceId is supported"
					}
				},
				"updateGhoTreasury(address)": {
					"details": "WARNING: The GhoTreasury is where revenue fees are sent to. Update carefully",
					"params": {
						"newGhoTreasury": "The address of the GhoTreasury"
					}
				},
				"updateMintFee(uint256)": {
					"details": "The fee is expressed in bps. A value of 100, results in 1.00%",
					"params": {
						"newFee": "The new percentage fee (in bps)"
					}
				}
			},
			"stateVariables": {
				"GHO_TOKEN": {
					"return": "The address of the GhoToken",
					"returns": {
						"_0": "The address of the GhoToken"
					}
				},
				"MAX_FEE": {
					"return": "The maximum percentage fee of the minted amount that the fee can be set to (in bps).",
					"returns": {
						"_0": "The maximum percentage fee of the minted amount that the fee can be set to (in bps)."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"GHO_TOKEN()": {
					"notice": "Returns the address of the GHO token contract"
				},
				"MAX_FEE()": {
					"notice": "Returns the maximum value the fee can be set to"
				},
				"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
					"notice": "Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."
				},
				"distributeFeesToTreasury()": {
					"notice": "Distribute fees to the GhoTreasury"
				},
				"getGhoTreasury()": {
					"notice": "Returns the address of the Gho Treasury"
				},
				"getMintFee()": {
					"notice": "Returns the percentage of each mint taken as a fee"
				},
				"getRouter()": {
					"notice": "Return the current router"
				},
				"supportsInterface(bytes4)": {
					"notice": "IERC165 supports an interfaceId"
				},
				"updateGhoTreasury(address)": {
					"notice": "Updates the address of the Gho Treasury"
				},
				"updateMintFee(uint256)": {
					"notice": "Updates the percentage fee. It is the percentage of the minted amount that needs to be repaid."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/CrossChainFacilitator.sol": "CrossChainFacilitator"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [
			":@chainlink/contracts-ccip/=lib/contracts-ccip/",
			":@openzeppelin/=lib/openzeppelin-contracts/",
			":ds-test/=lib/forge-std/lib/ds-test/src/",
			":forge-std/=lib/forge-std/",
			":forge-std/=lib/forge-std/src/"
		]
	},
	"sources": {
		"lib/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol": {
			"keccak256": "0xd59dbf083bfad8fe95248cac59822ade0bc7d70e50ab05e366cb35a2b2ea99f6",
			"license": "MIT",
			"urls": [
				"bzz-raw://20205c17fa785b37acf0547c656ed60e09e806df7472e0f608129daa028f30f7",
				"dweb:/ipfs/QmcAUurGrEdn5pE66sVQek4M7EiGkdoKt38qThFpxcpGLB"
			]
		},
		"lib/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol": {
			"keccak256": "0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48",
			"license": "MIT",
			"urls": [
				"bzz-raw://e3bb4ca50612b0150a29b9ea7c82f6228914ff54716584541bad5c0259e8fa33",
				"dweb:/ipfs/QmTnqhNtBD9bUmqVaR4YHkWrBUdSGHV3DXAgrTM193PGkH"
			]
		},
		"lib/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol": {
			"keccak256": "0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b",
			"license": "MIT",
			"urls": [
				"bzz-raw://14e2547e54a0e225d1aa654d49ad47a169f966b985456612af449eec610189ea",
				"dweb:/ipfs/QmcWVnkJ6TKcUR4koDQQGiYMEt7vJ6WG9XcrwbPiPDHoP9"
			]
		},
		"lib/contracts-ccip/src/v0.8/ccip/libraries/Client.sol": {
			"keccak256": "0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679",
			"license": "MIT",
			"urls": [
				"bzz-raw://14395fefc8310c9a355262359c8f51036f83c004982fb600164c2a007629f81e",
				"dweb:/ipfs/QmeCLr8a5bDVyLQm8v947ULgV4CZmUeQPjVyWixzieBD5o"
			]
		},
		"lib/contracts-ccip/src/v0.8/shared/access/ConfirmedOwner.sol": {
			"keccak256": "0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72",
			"license": "MIT",
			"urls": [
				"bzz-raw://af0371c1af45db651823b9a3d5af761b08243c78f105166342eee28de356c8dd",
				"dweb:/ipfs/QmPnC9qNDKwJFd5unwLb9pxjrutoe8MWjm5EXHTxq2kJ4x"
			]
		},
		"lib/contracts-ccip/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol": {
			"keccak256": "0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405",
			"license": "MIT",
			"urls": [
				"bzz-raw://ecc56a2cddb1ba6225ca0cffb07fdf6e24bcc4234cc87710c42a59c0a21ae395",
				"dweb:/ipfs/QmSpW4vkPHeRNZ14beMEk2LEtqY5JQTueNJC4sCT8JaSoc"
			]
		},
		"lib/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol": {
			"keccak256": "0x895af02d6a3df2930bbb6ec1f2d68118b492ca6e710ba0c34fcb6b574a0906aa",
			"license": "MIT",
			"urls": [
				"bzz-raw://c4c69fab5eea1c0448f856a51d7e5736454fe5cc083d36c60bf3ee23bb3d0e8e",
				"dweb:/ipfs/QmP4fYQ9k7xeZms6cwnqnQuuAkRkeE2TWewyvCD8Mrc2DZ"
			]
		},
		"lib/contracts-ccip/src/v0.8/shared/interfaces/IOwnable.sol": {
			"keccak256": "0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767",
			"license": "MIT",
			"urls": [
				"bzz-raw://17c636625a5d29a140612db496d2cca9fb4b48c673adb0fd7b3957d287e75921",
				"dweb:/ipfs/QmNoBX8TY424bdQWyQC7y3kpKfgxyWxhLw7KEhhEEoBN9q"
			]
		},
		"lib/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244",
			"license": "MIT",
			"urls": [
				"bzz-raw://0f235b9175d95111f301d729566e214c32559e55a2b0579c947484748e20679d",
				"dweb:/ipfs/QmSsNBuPejy1wNe2u3JSt2p9wFhrjvBjFrnAaNe1nDNkEA"
			]
		},
		"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
			"keccak256": "0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41",
			"license": "MIT",
			"urls": [
				"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26",
				"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"src/CrossChainFacilitator.sol": {
			"keccak256": "0xb23341d36f60473b7e40ffb59cab5de114f595c8834b10acb4e6205aabfcf745",
			"license": "MIT",
			"urls": [
				"bzz-raw://4b079064711daf90b48dcd678feaf12f4795de5544031ba89c5764337b795d6d",
				"dweb:/ipfs/QmWcYThdY3uCLpfNZJmA5mqbyZZysH6G8SERG42kkMnjZK"
			]
		},
		"src/CrossChainGHOTransfer.sol": {
			"keccak256": "0x804522c01b8df36e3c7395b9091410e596def7eeb3e6b341cfe0cf545ca2a40c",
			"license": "MIT",
			"urls": [
				"bzz-raw://68c96fbda551bfd96029cf1b46927de7e56c625fe4a498d11081c10d2c4edd6f",
				"dweb:/ipfs/QmPYGViBtn9JUX3YWebdXoTtchnDTqEHDuJ4MbqveoKs7k"
			]
		},
		"src/PercentageMath.sol": {
			"keccak256": "0xa36be65626100bbd13865ff8828ccdcb7ff4e9277bc9328faa34dd753f9dfc4c",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://534c570125fc61ad186dbcc9801a30f14f0c6721ccf5ad4b11fc8f7079b75e39",
				"dweb:/ipfs/QmUdegYoUU8nixYNvijDaffChQnbfMdpUR9xHUP7wxZHbJ"
			]
		},
		"src/gho/interfaces/IGhoFacilitator.sol": {
			"keccak256": "0x92bbe4b3abec970871fb3d04df69c24791649ef47a3e6a8759904f3c6ea62cf4",
			"license": "MIT",
			"urls": [
				"bzz-raw://834a98fab6b345a9c44a523c914c7a30c8488b52ffc31aeaf28cdbdb5ee4057f",
				"dweb:/ipfs/QmZqa4gEYYfvpmQ1pdriHEVFyUfLt8TFUBkDRWFf8Q5EA4"
			]
		},
		"src/gho/interfaces/IGhoToken.sol": {
			"keccak256": "0x5494567a105809a295f6e94e4007ac0b41c477bca796a95990a893ee177ad18f",
			"license": "MIT",
			"urls": [
				"bzz-raw://13300ae440eca4c799b56eda18ecebad068e9e10bbb74b458f795127c420fa50",
				"dweb:/ipfs/QmeXmj21w3S34dnx8ygpqEf45sZfoJJwcqtVTwS1jqTSP2"
			]
		},
		"src/interfaces/ICrossChainFacilitator.sol": {
			"keccak256": "0xe20432170d0b64cd8196acc8f95607f855fa1bdfec7692050d20fc0b99527d7d",
			"license": "MIT",
			"urls": [
				"bzz-raw://253c6fe6d5c60d47500a2a2d0b6f0152fe9bec710367e90975b1bde26e5a834a",
				"dweb:/ipfs/QmRe4byrWdD3St6R6W8XCM6BmSoCCoXgym41ejk6YpxnK4"
			]
		}
	},
	"version": 1
}